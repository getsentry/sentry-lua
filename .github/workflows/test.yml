name: Tests

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  LUAJIT_2_0_VERSION: "v2.0.5"
  LUAJIT_2_1_VERSION: "v2.1.0-beta3"

jobs:
  test:
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        lua-version: ["5.1", "5.2", "5.3", "5.4", "luajit-2.0", "luajit-2.1"]
        include:
          - lua-version: "luajit-2.0" 
            luajit-version: "v2.0.5"
            luajit-label: "LuaJIT 2.0.5"
          - lua-version: "luajit-2.1"
            luajit-version: "v2.1.0-beta3"  
            luajit-label: "LuaJIT 2.1.0-beta3"
    
    runs-on: ${{ matrix.os }}
    
    steps:
    - uses: actions/checkout@08eba0b27e820071cde6df949e0beb9ba4906955 # v4
    
    - name: Setup MSVC (Windows)
      if: matrix.os == 'windows-latest'
      uses: ilammy/msvc-dev-cmd@0b201ec74fa43914dc39ae48a89fd1d8cb592756 # v1
    
    - name: Setup Lua (standard versions only)
      if: ${{ !contains(matrix.lua-version, 'luajit') }}
      uses: leafo/gh-actions-lua@35bcb06abec04ec87df82e08caa84d545348536e # v10
      with:
        luaVersion: ${{ matrix.lua-version }}
    
    - name: Setup ${{ matrix.luajit-label || 'LuaJIT' }} on Ubuntu (via apt)
      if: contains(matrix.lua-version, 'luajit') && matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y luajit libluajit-5.1-dev
        # Create compatibility symlinks
        sudo ln -sf $(which luajit) /usr/local/bin/lua
        echo "LUA_DIR=/usr" >> $GITHUB_ENV
        echo "LUA_INCDIR=/usr/include/luajit-2.1" >> $GITHUB_ENV
    
    - name: Setup ${{ matrix.luajit-label || 'LuaJIT' }} on macOS (via Homebrew)
      if: contains(matrix.lua-version, 'luajit') && matrix.os == 'macos-latest'
      run: |
        brew install luajit
        # Create symlinks for compatibility
        sudo ln -sf $(which luajit) /usr/local/bin/lua
        echo "$(dirname $(which luajit))" >> $GITHUB_PATH
        echo "LUA_DIR=$(brew --prefix luajit)" >> $GITHUB_ENV
        echo "LUA_INCDIR=$(brew --prefix luajit)/include/luajit-2.1" >> $GITHUB_ENV
    
    - name: Setup ${{ matrix.luajit-label || 'LuaJIT' }} on Windows (manual install)
      if: contains(matrix.lua-version, 'luajit') && matrix.os == 'windows-latest'
      shell: cmd
      run: |
        echo Cloning LuaJIT version: ${{ matrix.luajit-version }}
        git clone --depth 1 --branch ${{ matrix.luajit-version }} https://github.com/LuaJIT/LuaJIT.git luajit-src
        cd luajit-src\src
        call msvcbuild.bat
        if not exist C:\luajit mkdir C:\luajit
        if not exist C:\luajit\include mkdir C:\luajit\include
        copy luajit.exe C:\luajit\
        copy lua51.dll C:\luajit\
        copy *.h C:\luajit\include\
        echo C:\luajit>>%GITHUB_PATH%
        echo LUA_DIR=C:\luajit>>%GITHUB_ENV%
        echo LUA_INCDIR=C:\luajit\include>>%GITHUB_ENV%
    
    - name: Setup LuaRocks (Linux/macOS only)
      if: ${{ !contains(matrix.lua-version, 'luajit') && matrix.os != 'windows-latest' }}
      uses: leafo/gh-actions-luarocks@e65774a6386cb4f24e293dca7fc4ff89165b64c5 # v4
    
    - name: Setup LuaRocks (Windows standard Lua)
      if: ${{ !contains(matrix.lua-version, 'luajit') && matrix.os == 'windows-latest' }}
      shell: bash
      run: |
        # Install LuaRocks manually for Windows
        curl -L -o luarocks.zip https://luarocks.github.io/luarocks/releases/luarocks-3.8.0-windows-64.zip
        unzip luarocks.zip -d /c/luarocks
        echo "/c/luarocks/luarocks-3.8.0-windows-64" >> $GITHUB_PATH
    
    - name: Setup LuaRocks for ${{ matrix.luajit-label || 'LuaJIT' }} on Ubuntu
      if: contains(matrix.lua-version, 'luajit') && matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get install -y luarocks
        # Create user config directory
        mkdir -p ~/.luarocks
        # Configure luarocks to work with luajit using --local for all operations
        luarocks config --local lua_interpreter luajit
        luarocks config --local variables.LUA_DIR /usr
        luarocks config --local variables.LUA_INCDIR /usr/include/luajit-2.1
        # Override make install to use --local flag
        echo 'LUAROCKS_FLAGS=--local' >> $GITHUB_ENV
    
    - name: Setup LuaRocks for ${{ matrix.luajit-label || 'LuaJIT' }} on macOS
      if: contains(matrix.lua-version, 'luajit') && matrix.os == 'macos-latest'
      run: |
        brew install luarocks
        # Configure luarocks to work with luajit
        luarocks config lua_interpreter luajit
        luarocks config variables.LUA_DIR $(brew --prefix luajit)
        luarocks config variables.LUA_INCDIR $(brew --prefix luajit)/include/luajit-2.1
    
    - name: Setup LuaRocks for ${{ matrix.luajit-label || 'LuaJIT' }} on Windows
      if: contains(matrix.lua-version, 'luajit') && matrix.os == 'windows-latest'
      shell: bash
      run: |
        # Install LuaRocks manually for Windows
        curl -L -o luarocks.zip https://luarocks.github.io/luarocks/releases/luarocks-3.8.0-windows-64.zip
        unzip luarocks.zip -d /c/luarocks
        echo "/c/luarocks/luarocks-3.8.0-windows-64" >> $GITHUB_PATH
        # Create luarocks config directory
        mkdir -p "$HOME/AppData/Roaming/luarocks" || true
        # Configure luarocks to work with luajit (with error handling)
        /c/luarocks/luarocks-3.8.0-windows-64/luarocks.exe config lua_interpreter luajit || echo "Config lua_interpreter failed, continuing"
        /c/luarocks/luarocks-3.8.0-windows-64/luarocks.exe config variables.LUA_DIR "C:/luajit" || echo "Config LUA_DIR failed, continuing"
        /c/luarocks/luarocks-3.8.0-windows-64/luarocks.exe config variables.LUA_INCDIR "C:/luajit/include" || echo "Config LUA_INCDIR failed, continuing"
    
    - name: Install SSL dependencies (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y libssl-dev
    
    - name: Install SSL dependencies (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        brew install openssl
        echo "OPENSSL_DIR=$(brew --prefix openssl)" >> $GITHUB_ENV
    
    - name: Install SSL dependencies (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        # Windows should have SSL support built-in with recent Lua builds
        echo "SSL dependencies handled by system"
    
    - name: Install Teal compiler (Windows)
      if: matrix.os == 'windows-latest'
      shell: bash
      run: |
        # Configure Lua paths for LuaRocks on Windows
        if [[ "${{ matrix.lua-version }}" != *"luajit"* ]]; then
          # For standard Lua versions, find the installed Lua location
          LUA_EXE=$(which lua.exe)
          LUA_DIR=$(dirname "$LUA_EXE")
          
          # Look for include directory in common locations
          if [[ -d "$LUA_DIR/include" ]]; then
            LUA_INCDIR="$LUA_DIR/include"
          elif [[ -d "$LUA_DIR/../include" ]]; then
            LUA_INCDIR="$LUA_DIR/../include"
          elif [[ -d "/c/tools/lua/include" ]]; then
            LUA_INCDIR="/c/tools/lua/include"
          else
            # Use a reasonable default
            LUA_INCDIR="$LUA_DIR/include"
            mkdir -p "$LUA_INCDIR" || true
          fi
          
          echo "LUA_DIR=$LUA_DIR" >> $GITHUB_ENV
          echo "LUA_INCDIR=$LUA_INCDIR" >> $GITHUB_ENV
          
          # Configure luarocks to use these paths
          luarocks config variables.LUA_DIR "$LUA_DIR" || true
          luarocks config variables.LUA_INCDIR "$LUA_INCDIR" || true
        fi
        
        # Install Teal using luarocks with fallback to binary distribution
        if [[ "${{ matrix.lua-version }}" == *"luajit"* ]]; then
          /c/luarocks/luarocks-3.8.0-windows-64/luarocks.exe install tl || echo "Teal installation failed for LuaJIT, will try at runtime"
        else
          # Try installing tl, if it fails due to missing headers, skip for now
          if ! luarocks install tl; then
            echo "Teal installation failed due to missing headers, will continue without pre-installed tl"
            # Download tl binary directly as fallback
            curl -L -o tl.zip https://github.com/teal-language/tl/releases/latest/download/tl-windows.zip || echo "Binary download failed"
            if [[ -f tl.zip ]]; then
              mkdir -p /c/teal-bin
              unzip tl.zip -d /c/teal-bin/ || true
              echo "/c/teal-bin" >> $GITHUB_PATH
            fi
          fi
        fi
        
        # Add luarocks bin to PATH for tl executable
        echo "$HOME/.luarocks/bin" >> $GITHUB_PATH
        echo "/c/luarocks/luarocks-3.8.0-windows-64/bin" >> $GITHUB_PATH
    
    - name: Install dependencies
      shell: bash
      run: |
        # For Ubuntu LuaJIT, use --local flag to avoid permission issues
        if [ "${{ matrix.os }}" = "ubuntu-latest" ] && [[ "${{ matrix.lua-version }}" == *"luajit"* ]]; then
          echo "Installing dependencies locally for Ubuntu LuaJIT..."
          luarocks install --local busted
          luarocks install --local tl
          luarocks install --local lua-cjson
          luarocks install --local luasocket
          if [ -n "$OPENSSL_DIR" ]; then
            echo "Installing luasec with OPENSSL_DIR=$OPENSSL_DIR"
            luarocks install --local luasec OPENSSL_DIR=$OPENSSL_DIR
          else
            luarocks install --local luasec
          fi
          luarocks install --local luacov
          luarocks install --local luacov-reporter-lcov
          # Add local luarocks bin to PATH
          echo "$HOME/.luarocks/bin" >> $GITHUB_PATH
        elif [ "${{ matrix.os }}" = "windows-latest" ]; then
          echo "Installing dependencies for Windows..."
          # Use the correct luarocks path for Windows
          if [[ "${{ matrix.lua-version }}" == *"luajit"* ]]; then
            LUAROCKS="/c/luarocks/luarocks-3.8.0-windows-64/luarocks.exe"
          else
            LUAROCKS="luarocks"
          fi
          
          $LUAROCKS install busted
          # tl is already installed in the Teal compiler step
          $LUAROCKS install lua-cjson
          $LUAROCKS install luasocket
          $LUAROCKS install luasec
          $LUAROCKS install luacov
          $LUAROCKS install luacov-reporter-lcov
        else
          make install
        fi
    
    - name: Build project (Linux/macOS)
      if: matrix.os != 'windows-latest'
      run: make build
    
    - name: Build project (Windows)
      if: matrix.os == 'windows-latest'
      shell: bash
      run: make build
    
    - name: Run tests with coverage (Linux/macOS)
      if: matrix.os != 'windows-latest'
      run: make coverage-report
    
    - name: Upload coverage artifacts (Linux/macOS)
      if: matrix.os != 'windows-latest'
      uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4
      with:
        name: coverage-${{ matrix.os }}-lua${{ matrix.lua-version }}
        path: |
          coverage.info
          luacov.report.out
          test-results.xml
        retention-days: 7
    
    - name: Run tests (Windows)
      if: matrix.os == 'windows-latest'
      shell: bash
      run: make test
    
    - name: Upload coverage to Codecov (Ubuntu Lua 5.4 only)
      if: matrix.os == 'ubuntu-latest' && matrix.lua-version == '5.4'
      uses: codecov/codecov-action@b9fd7d16f6d7d1b5d2bec1a2887e65ceed900238 # v4
      with:
        file: ./coverage.info
        flags: unittests
        name: codecov-${{ matrix.lua-version }}
        fail_ci_if_error: false
        token: ${{ secrets.CODECOV_TOKEN }}
    
    - name: Upload test results to Codecov (Ubuntu Lua 5.4 only)
      if: matrix.os == 'ubuntu-latest' && matrix.lua-version == '5.4'
      uses: codecov/test-results-action@47f89e9acb64b76debcd5ea40642d25a4adced9f # v1
      with:
        file: ./test-results.xml
        token: ${{ secrets.CODECOV_TOKEN }}