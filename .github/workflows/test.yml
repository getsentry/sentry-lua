permissions:
  contents: read
name: Tests

on:
  push:
    branches:
      - main
      - release/*
  pull_request:
    paths-ignore:
      - "**.md"

env:
  LUAJIT_2_0_VERSION: "v2.0.5"
  LUAJIT_2_1_VERSION: "v2.1.0-beta3"

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@08eba0b27e820071cde6df949e0beb9ba4906955 # v4
    
    - name: Setup Lua
      uses: leafo/gh-actions-lua@35bcb06abec04ec87df82e08caa84d545348536e # v10
      with:
        luaVersion: "5.4"
    
    - name: Setup LuaRocks
      uses: leafo/gh-actions-luarocks@e65774a6386cb4f24e293dca7fc4ff89165b64c5 # v4
    
    - name: Install dependencies
      run: lua scripts/dev.lua install
    
    - name: Check formatting
      run: lua scripts/dev.lua format-check
    
    - name: Format code with StyLua
      if: failure()
      run: lua scripts/dev.lua format
    
    - name: Commit formatted code
      if: failure()
      run: |
        if [[ $(git status --porcelain) ]]; then
          echo "Code was formatted. Committing changes."
          git config --global user.name 'Sentry GitHub Bot'
          git config --global user.email 'bot+github-bot@sentry.io'
          git add .
          git commit -m "Format code with StyLua [skip ci]"
          git push
        else
          echo "No formatting changes needed."
        fi

    - name: Run linter
      run: lua scripts/dev.lua lint

  test:
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest]
        lua-version: ["5.1", "5.2", "5.3", "5.4", "luajit-2.0", "luajit-2.1"]
        include:
          - lua-version: "luajit-2.0" 
            luajit-version: "v2.0.5"
            luajit-label: "LuaJIT 2.0.5"
          - lua-version: "luajit-2.1"
            luajit-version: "v2.1.0-beta3"  
            luajit-label: "LuaJIT 2.1.0-beta3"
    
    runs-on: ${{ matrix.os }}
    
    steps:
    - uses: actions/checkout@08eba0b27e820071cde6df949e0beb9ba4906955 # v4
    
    - name: Setup Lua (standard versions)
      if: ${{ !contains(matrix.lua-version, 'luajit') }}
      uses: leafo/gh-actions-lua@35bcb06abec04ec87df82e08caa84d545348536e # v10
      with:
        luaVersion: ${{ matrix.lua-version }}
    
    - name: Setup ${{ matrix.luajit-label || 'LuaJIT' }} on Ubuntu (via apt)
      if: contains(matrix.lua-version, 'luajit') && matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y luajit libluajit-5.1-dev
        # Create compatibility symlinks
        sudo ln -sf $(which luajit) /usr/local/bin/lua
        echo "LUA_DIR=/usr" >> $GITHUB_ENV
        echo "LUA_INCDIR=/usr/include/luajit-2.1" >> $GITHUB_ENV
    
    - name: Setup ${{ matrix.luajit-label || 'LuaJIT' }} on macOS (via Homebrew)
      if: contains(matrix.lua-version, 'luajit') && matrix.os == 'macos-latest'
      run: |
        brew install luajit
        # Create symlinks for compatibility
        sudo ln -sf $(which luajit) /usr/local/bin/lua
        echo "$(dirname $(which luajit))" >> $GITHUB_PATH
        echo "LUA_DIR=$(brew --prefix luajit)" >> $GITHUB_ENV
        echo "LUA_INCDIR=$(brew --prefix luajit)/include/luajit-2.1" >> $GITHUB_ENV
    
    - name: Setup LuaRocks
      if: ${{ !contains(matrix.lua-version, 'luajit') }}
      uses: leafo/gh-actions-luarocks@e65774a6386cb4f24e293dca7fc4ff89165b64c5 # v4
    
    - name: Setup LuaRocks for ${{ matrix.luajit-label || 'LuaJIT' }} on Ubuntu
      if: contains(matrix.lua-version, 'luajit') && matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get install -y luarocks
        # Create user config directory
        mkdir -p ~/.luarocks
        # Configure luarocks to work with luajit using --local for all operations
        luarocks config --local lua_interpreter luajit
        luarocks config --local variables.LUA_DIR /usr
        luarocks config --local variables.LUA_INCDIR /usr/include/luajit-2.1
        # Override make install to use --local flag
        echo 'LUAROCKS_FLAGS=--local' >> $GITHUB_ENV
    
    - name: Setup LuaRocks for ${{ matrix.luajit-label || 'LuaJIT' }} on macOS
      if: contains(matrix.lua-version, 'luajit') && matrix.os == 'macos-latest'
      run: |
        brew install luarocks
        # Configure luarocks to work with luajit
        luarocks config lua_interpreter luajit
        luarocks config variables.LUA_DIR $(brew --prefix luajit)
        luarocks config variables.LUA_INCDIR $(brew --prefix luajit)/include/luajit-2.1
    
    - name: Install SSL dependencies (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y libssl-dev
    
    - name: Install SSL dependencies (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        brew install openssl
        echo "OPENSSL_DIR=$(brew --prefix openssl)" >> $GITHUB_ENV
    
    
    - name: Install dependencies
      shell: bash
      run: |
        # For Ubuntu LuaJIT, we need to handle luasec SSL configuration
        if [ "${{ matrix.os }}" = "ubuntu-latest" ] && [[ "${{ matrix.lua-version }}" == *"luajit"* ]]; then
          # Install dependencies individually to handle SSL configuration
          luarocks install --local busted
          luarocks install --local lua-cjson
          luarocks install --local luasocket
          if [ -n "$OPENSSL_DIR" ]; then
            echo "Installing luasec with OPENSSL_DIR=$OPENSSL_DIR"
            luarocks install --local luasec OPENSSL_DIR=$OPENSSL_DIR
          else
            luarocks install --local luasec
          fi
          luarocks install --local luacov
          luarocks install --local luacov-reporter-lcov
          luarocks install --local luacheck
          # Add local luarocks bin to PATH
          echo "$HOME/.luarocks/bin" >> $GITHUB_PATH
        else
          lua scripts/dev.lua install
        fi
    
    - name: Run tests with coverage
      run: lua scripts/dev.lua coverage
    
    - name: Validate rockspec installation
      shell: bash
      run: |
        # For Ubuntu LuaJIT, update the rockspec test to use local luarocks path  
        if [ "${{ matrix.os }}" = "ubuntu-latest" ] && [[ "${{ matrix.lua-version }}" == *"luajit"* ]]; then
          eval "$(luarocks path --local)"
          lua scripts/dev.lua test-rockspec
        else
          lua scripts/dev.lua test-rockspec
        fi
    
    - name: Upload coverage artifacts
      uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4
      with:
        name: coverage-${{ matrix.os }}-lua${{ matrix.lua-version }}
        path: |
          luacov.report.out
          luacov.stats.out
        retention-days: 7
    
    - name: Upload coverage to Codecov (Ubuntu Lua 5.4 only)
      if: matrix.os == 'ubuntu-latest' && matrix.lua-version == '5.4'
      uses: codecov/codecov-action@b9fd7d16f6d7d1b5d2bec1a2887e65ceed900238 # v4
      with:
        file: ./luacov.report.out
        flags: unittests
        name: codecov-${{ matrix.lua-version }}
        fail_ci_if_error: false
        token: ${{ secrets.CODECOV_TOKEN }}
    
    - name: Upload test results to Codecov (Ubuntu Lua 5.4 only)
      if: matrix.os == 'ubuntu-latest' && matrix.lua-version == '5.4'
      uses: codecov/test-results-action@47f89e9acb64b76debcd5ea40642d25a4adced9f # v1
      with:
        file: ./test-results.xml
        token: ${{ secrets.CODECOV_TOKEN }}

    - name: Create distribution zip
      if: matrix.os == 'ubuntu-latest' && matrix.lua-version == '5.4'
      shell: bash
      run: |
        echo "Creating distribution zip for Love2D and other non-LuaRocks users..."
        
        # Create temporary directory for packaging
        mkdir -p dist-temp
        
        # Copy required files and directories
        cp CHANGELOG.md dist-temp/ || { echo "❌ CHANGELOG.md not found"; exit 1; }
        cp README.md dist-temp/ || { echo "❌ README.md not found"; exit 1; }
        
        # Copy directories (recursively)
        cp -r src dist-temp/ || { echo "❌ src directory not found"; exit 1; }
        cp -r spec dist-temp/ || { echo "❌ spec directory not found"; exit 1; }
        cp -r examples dist-temp/ || { echo "❌ examples directory not found"; exit 1; }
        
        # Create zip file
        cd dist-temp && zip -r ../sentry-lua-sdk.zip . > /dev/null
        cd ..
        
        # Clean up temporary directory
        rm -rf dist-temp
        
        echo "✅ Distribution zip created: sentry-lua-sdk.zip"
        
        # Show contents for verification
        echo "Distribution zip contents:"
        unzip -l sentry-lua-sdk.zip

    - name: Upload distribution zip artifact
      if: matrix.os == 'ubuntu-latest' && matrix.lua-version == '5.4'
      uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4
      with:
        # Must be named as the SHA alone so craft can find it and release it.
        name: ${{ github.sha }}
        path: "sentry-lua-sdk.zip"