#!/usr/bin/env lua
--[[
  Roblox SDK Packer
  
  This script combines the built Sentry SDK into a single file suitable for Roblox,
  handling module dependencies and creating a self-contained implementation.
  
  Usage: lua scripts/pack-roblox-sdk.lua
  
  Output: examples/roblox/sentry-roblox-packed.lua
]]--

local function read_file(filename)
    local file = io.open(filename, "r")
    if not file then
        error("Could not read file: " .. filename)
    end
    local content = file:read("*all")
    file:close()
    return content
end

local function write_file(filename, content)
    local file = io.open(filename, "w")
    if not file then
        error("Could not write file: " .. filename)
    end
    file:write(content)
    file:close()
end

local function extract_module_content(file_content)
    -- Remove module wrapper and return statement to get the actual implementation
    local content = file_content:gsub("^%s*local%s+[%w_]+%s*=%s*{}", "")  -- Remove local module = {}
    content = content:gsub("return%s+[%w_]+%s*$", "")  -- Remove return statement
    content = content:gsub("^%s*", ""):gsub("%s*$", "")  -- Trim whitespace
    return content
end

print("üî® Packing Sentry SDK for Roblox")
print("=" .. string.rep("=", 40))

-- Check if build directory exists
local build_dir = "build/sentry/"
local init_file = build_dir .. "init.lua"

local file_test = io.open(init_file, "r")
if not file_test then
    error("‚ùå Sentry SDK not built. Run 'make build' first.")
end
file_test:close()

print("‚úÖ Found built Sentry SDK")

-- Read core module files
local modules = {
    init = read_file(build_dir .. "init.lua"),
    client = read_file(build_dir .. "core/client.lua"),
    transport = read_file(build_dir .. "platforms/roblox/transport.lua"),
    context = read_file(build_dir .. "platforms/roblox/context.lua"),
    dsn = read_file(build_dir .. "utils/dsn.lua"),
    json = read_file(build_dir .. "utils/json.lua"),
    envelope = read_file(build_dir .. "utils/envelope.lua"),
    serialize = read_file(build_dir .. "utils/serialize.lua"),
    types = read_file(build_dir .. "types.lua"),
    utils = read_file(build_dir .. "utils.lua"),
}

print("‚úÖ Read " .. #modules .. " SDK modules")

-- Create packed SDK content
local packed_content = [[--[[
  Sentry SDK for Roblox - Packed Version
  
  This file contains the complete Sentry SDK packed into a single file
  for easy integration with Roblox projects.
  
  Generated by: scripts/pack-roblox-sdk.lua
  
  Usage:
    local sentry = require(this_module)
    sentry.init({dsn = "your-sentry-dsn"})
    sentry.capture_message("Hello Sentry!")
]]--

-- Roblox-specific services
local HttpService = game:GetService("HttpService")
local RunService = game:GetService("RunService")

-- Core SDK Implementation
local sentry = {}

-- ============================================================================
-- TYPES MODULE
-- ============================================================================

]] .. extract_module_content(modules.types) .. [[


-- ============================================================================
-- UTILS MODULE  
-- ============================================================================

]] .. extract_module_content(modules.utils) .. [[


-- ============================================================================
-- JSON UTILS
-- ============================================================================

local json = {}
]] .. extract_module_content(modules.json) .. [[


-- ============================================================================
-- DSN UTILS
-- ============================================================================

local dsn = {}
]] .. extract_module_content(modules.dsn) .. [[


-- ============================================================================
-- ENVELOPE UTILS
-- ============================================================================

local envelope = {}
]] .. extract_module_content(modules.envelope) .. [[


-- ============================================================================
-- SERIALIZE UTILS
-- ============================================================================

local serialize = {}
]] .. extract_module_content(modules.serialize) .. [[


-- ============================================================================
-- ROBLOX TRANSPORT
-- ============================================================================

local transport = {}
]] .. extract_module_content(modules.transport) .. [[


-- ============================================================================
-- ROBLOX CONTEXT
-- ============================================================================

local context = {}
]] .. extract_module_content(modules.context) .. [[


-- ============================================================================
-- CLIENT MODULE
-- ============================================================================

local client = {}
]] .. extract_module_content(modules.client) .. [[


-- ============================================================================
-- MAIN SENTRY MODULE
-- ============================================================================

]] .. extract_module_content(modules.init) .. [[


-- Export the main sentry module
return sentry
]]

-- Write the packed SDK
local output_file = "examples/roblox/sentry-roblox-packed.lua"
write_file(output_file, packed_content)

print("‚úÖ Created packed SDK: " .. output_file)

-- Get file size
local file_size = io.open(output_file, "r"):seek("end")
print("üìä File size: " .. math.floor(file_size / 1024) .. " KB")

print("üéâ Packing completed successfully!")
print("")
print("üìã Next steps:")
print("1. Use the packed SDK in Roblox examples")
print("2. Test with: lua examples/roblox/test-packed-sdk.lua")
print("3. Copy to Roblox Studio for integration testing")